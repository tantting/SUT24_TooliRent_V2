// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250925144435_Updated Entities and DbContext")]
    partial class UpdatedEntitiesandDbContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CertificationTool", b =>
                {
                    b.Property<int>("CertificationsId")
                        .HasColumnType("int");

                    b.Property<int>("ToolsId")
                        .HasColumnType("int");

                    b.HasKey("CertificationsId", "ToolsId");

                    b.HasIndex("ToolsId");

                    b.ToTable("CertificationTool");
                });

            modelBuilder.Entity("SUT24_TooliRent_V2_Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ToolId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2390),
                            EndDate = new DateTime(2025, 10, 2, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2390),
                            MemberId = 1,
                            StartDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2390),
                            Status = 1,
                            ToolId = 1,
                            UpdatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2390)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2400),
                            EndDate = new DateTime(2025, 9, 28, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2400),
                            MemberId = 2,
                            StartDate = new DateTime(2025, 9, 26, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2400),
                            Status = 0,
                            ToolId = 2,
                            UpdatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2400)
                        });
                });

            modelBuilder.Entity("SUT24_TooliRent_V2_Domain.Entities.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CertificationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ToolId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ToolId");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificationDate = new DateTime(2024, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2360),
                            CreatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2360),
                            ExpirationDate = new DateTime(2026, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2360),
                            MemberId = 1,
                            Type = "General",
                            UpdatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2360)
                        },
                        new
                        {
                            Id = 2,
                            CertificationDate = new DateTime(2025, 3, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2370),
                            CreatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2370),
                            ExpirationDate = new DateTime(2026, 3, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2370),
                            MemberId = 1,
                            ToolId = 1,
                            Type = "PowerTools",
                            UpdatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2370)
                        });
                });

            modelBuilder.Entity("SUT24_TooliRent_V2_Domain.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Storgatan 1",
                            Email = "anna@example.com",
                            IsActive = true,
                            MembershipDate = new DateTime(2023, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2300),
                            Name = "Anna Andersson",
                            PersonalNumber = "8501011234",
                            PhoneNumber = "0701234567"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Lillgatan 5",
                            Email = "bjorn@example.com",
                            IsActive = true,
                            MembershipDate = new DateTime(2024, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2310),
                            Name = "Björn Berg",
                            PersonalNumber = "9202025678",
                            PhoneNumber = "0709876543"
                        });
                });

            modelBuilder.Entity("SUT24_TooliRent_V2_Domain.Entities.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DemandsCertification")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Tools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "PowerTools",
                            Condition = "Good",
                            CreatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2330),
                            DemandsCertification = true,
                            Description = "En kraftfull borrmaskin",
                            IsAvailable = true,
                            Name = "Borrmaskin",
                            UpdatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2330),
                            WorkshopId = 1
                        },
                        new
                        {
                            Id = 2,
                            Category = "HeavyMachinery",
                            Condition = "Good",
                            CreatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2330),
                            DemandsCertification = true,
                            Description = "MIG-svets för metall",
                            IsAvailable = true,
                            Name = "Svets",
                            UpdatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2330),
                            WorkshopId = 2
                        },
                        new
                        {
                            Id = 3,
                            Category = "HandTools",
                            Condition = "Good",
                            CreatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2340),
                            DemandsCertification = false,
                            Description = "En klassisk hammare",
                            IsAvailable = true,
                            Name = "Hammare",
                            UpdatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2340),
                            WorkshopId = 1
                        },
                        new
                        {
                            Id = 4,
                            Category = "MeasuringTools",
                            Condition = "Good",
                            CreatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2340),
                            DemandsCertification = false,
                            Description = "För precis mätning",
                            IsAvailable = true,
                            Name = "Laseravståndsmätare",
                            UpdatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2340),
                            WorkshopId = 1
                        });
                });

            modelBuilder.Entity("SUT24_TooliRent_V2_Domain.Entities.Workshop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Workshops");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2220),
                            Description = "För träarbeten",
                            Name = "Snickeriverkstaden",
                            UpdatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2220)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2220),
                            Description = "För metallarbete och svetsning",
                            Name = "Metallverkstaden",
                            UpdatedDate = new DateTime(2025, 9, 25, 14, 44, 35, 36, DateTimeKind.Utc).AddTicks(2220)
                        });
                });

            modelBuilder.Entity("CertificationTool", b =>
                {
                    b.HasOne("SUT24_TooliRent_V2_Domain.Entities.Certification", null)
                        .WithMany()
                        .HasForeignKey("CertificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SUT24_TooliRent_V2_Domain.Entities.Tool", null)
                        .WithMany()
                        .HasForeignKey("ToolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SUT24_TooliRent_V2_Domain.Entities.Booking", b =>
                {
                    b.HasOne("SUT24_TooliRent_V2_Domain.Entities.Member", "Member")
                        .WithMany("Bookings")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SUT24_TooliRent_V2_Domain.Entities.Tool", "Tool")
                        .WithMany("Bookings")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("SUT24_TooliRent_V2_Domain.Entities.Certification", b =>
                {
                    b.HasOne("SUT24_TooliRent_V2_Domain.Entities.Member", "Member")
                        .WithMany("Certifications")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SUT24_TooliRent_V2_Domain.Entities.Tool", "Tool")
                        .WithMany("SpecialCertifications")
                        .HasForeignKey("ToolId");

                    b.Navigation("Member");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("SUT24_TooliRent_V2_Domain.Entities.Tool", b =>
                {
                    b.HasOne("SUT24_TooliRent_V2_Domain.Entities.Workshop", "Workshop")
                        .WithMany("Tools")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("SUT24_TooliRent_V2_Domain.Entities.Member", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Certifications");
                });

            modelBuilder.Entity("SUT24_TooliRent_V2_Domain.Entities.Tool", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("SpecialCertifications");
                });

            modelBuilder.Entity("SUT24_TooliRent_V2_Domain.Entities.Workshop", b =>
                {
                    b.Navigation("Tools");
                });
#pragma warning restore 612, 618
        }
    }
}
